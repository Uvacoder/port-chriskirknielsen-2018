$colors: (
    'main': #00a39b,
    'main-light': lighten(#00a39b, 15%),
    'main-dark': darken(#00a39b, 15%),
    'comp': #cf0079,
    'comp-light': lighten(#cf0079, 15%),
    'comp-dark': darken(#cf0079, 15%),
    'glow': #ffd200,
    'glow-light': lighten(#ffd200, 15%),
    'glow-dark': darken(#ffd200, 15%),
    'kitt': #cf0000,
    'z': #e6e6e6,
    'z-m': #9c9c9c,
    'm': #686868,
    'a-m': #343434,
    'a': #161616
);

/** SCSS function to return a colour from a list, in hexidecimal or rgba value
 * @param name: key used in the $colors list associated with a hexadecimal colour
 * @param opacity: opacity value [0, 100] to be used by the rgba() colour; hex (default) to get the solid colour in hexadecimal value
**/
@function color($name, $opacity: hex) {
    @if map-has-key($colors, $name) { // If the colour exists in the list…
        @if $opacity != hex { // …return RGBA value
            $opacity-decimal: $opacity/100;
            @return rgba(map-get($colors, $name), $opacity-decimal);
        }
        @else { // …returns hexidecimal value
            @return map-get($colors, $name);
        }
    }
    @else { // Return a CSS colour keyword in case it exists
        @return unquote($name);
    }
}